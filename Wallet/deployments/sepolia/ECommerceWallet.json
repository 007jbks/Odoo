{
  "address": "0x7d1aA1C96b9c4FD03a35aE45BfB91655e769F713",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "TokensAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "TokensSubtracted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "userId",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        }
      ],
      "name": "WalletCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "userId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addTokensByUserId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "userId",
          "type": "string"
        }
      ],
      "name": "createWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "userId",
          "type": "string"
        }
      ],
      "name": "getBalanceByUserId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "userId",
          "type": "string"
        }
      ],
      "name": "getWalletAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        }
      ],
      "name": "isWalletRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "subtractTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "userId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "subtractTokensByUserId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x03190cc03042505a0ec35398c97d2679b27a6159ba924cd8d6f4d77c21ef8442",
  "receipt": {
    "to": null,
    "from": "0xde10aAC9b02Ff975AC75577F5d1F864B57344DDB",
    "contractAddress": "0x7d1aA1C96b9c4FD03a35aE45BfB91655e769F713",
    "transactionIndex": 77,
    "gasUsed": "1532968",
    "logsBloom": "0x
    "blockHash": "0xacd5f6356fe66f419a54fd1b8e76ef8b6b0c9cbbcdd03fe8e6b5a6beeaf19925",
    "transactionHash": "0x03190cc03042505a0ec35398c97d2679b27a6159ba924cd8d6f4d77c21ef8442",
    "logs": [
      {
        "transactionIndex": 77,
        "blockNumber": 8746330,
        "transactionHash": "0x03190cc03042505a0ec35398c97d2679b27a6159ba924cd8d6f4d77c21ef8442",
        "address": "0x7d1aA1C96b9c4FD03a35aE45BfB91655e769F713",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000de10aac9b02ff975ac75577f5d1f864b57344ddb"
        ],
        "data": "0x",
        "logIndex": 94,
        "blockHash": "0xacd5f6356fe66f419a54fd1b8e76ef8b6b0c9cbbcdd03fe8e6b5a6beeaf19925"
      }
    ],
    "blockNumber": 8746330,
    "cumulativeGasUsed": "7310969",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "2b39216f1eeed332bd3be4c3915a635c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"TokensAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"TokensSubtracted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"userId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"WalletCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"userId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addTokensByUserId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"userId\",\"type\":\"string\"}],\"name\":\"createWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"userId\",\"type\":\"string\"}],\"name\":\"getBalanceByUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"userId\",\"type\":\"string\"}],\"name\":\"getWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"isWalletRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"subtractTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"userId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"subtractTokensByUserId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A simplified wallet contract for an e-commerce site where the backend manages user token balances. This contract is owned by a single address (the backend's address) which has the sole authority to add and subtract tokens from user accounts. All balance changes are recorded on the blockchain via events for transparency.\",\"kind\":\"dev\",\"methods\":{\"addTokens(address,uint256)\":{\"details\":\"Adds a specified `amount` of tokens to a `user`'s balance. Only the contract owner (backend) can call this function.\",\"params\":{\"amount\":\"The amount of tokens to add.\",\"user\":\"The address (or unique ID) of the user whose balance will be increased.\"}},\"addTokensByUserId(string,uint256)\":{\"details\":\"Convenience function to add tokens using userId instead of address. Only the contract owner (backend) can call this function.\",\"params\":{\"amount\":\"The amount of tokens to add.\",\"userId\":\"The unique identifier for the user.\"}},\"createWallet(string)\":{\"details\":\"Creates a new wallet address for a user identified by userId. Only the contract owner (backend) can call this function.\",\"params\":{\"userId\":\"The unique identifier for the user (e.g., email, username, or UUID).\"},\"returns\":{\"_0\":\"walletAddress The generated wallet address for the user.\"}},\"getBalance(address)\":{\"details\":\"Returns the current token balance of a specific `user`.\",\"params\":{\"user\":\"The address (or unique ID) of the user.\"},\"returns\":{\"_0\":\"The balance of the user.\"}},\"getBalanceByUserId(string)\":{\"details\":\"Convenience function to get balance using userId instead of address.\",\"params\":{\"userId\":\"The unique identifier for the user.\"},\"returns\":{\"_0\":\"The balance of the user.\"}},\"getWalletAddress(string)\":{\"details\":\"Returns the wallet address for a given userId.\",\"params\":{\"userId\":\"The unique identifier for the user.\"},\"returns\":{\"_0\":\"The wallet address associated with the userId.\"}},\"isWalletRegistered(address)\":{\"details\":\"Checks if a wallet address is registered in the system.\",\"params\":{\"walletAddress\":\"The address to check.\"},\"returns\":{\"_0\":\"True if the address is registered, false otherwise.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"subtractTokens(address,uint256)\":{\"details\":\"Subtracts a specified `amount` of tokens from a `user`'s balance. Only the contract owner (backend) can call this function. Requires that the user has sufficient balance.\",\"params\":{\"amount\":\"The amount of tokens to subtract.\",\"user\":\"The address (or unique ID) of the user whose balance will be decreased.\"}},\"subtractTokensByUserId(string,uint256)\":{\"details\":\"Convenience function to subtract tokens using userId instead of address. Only the contract owner (backend) can call this function.\",\"params\":{\"amount\":\"The amount of tokens to subtract.\",\"userId\":\"The unique identifier for the user.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"ECommerceWallet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wallet.sol\":\"ECommerceWallet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/wallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor() {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n/**\\n * @title ECommerceWallet\\n * @dev A simplified wallet contract for an e-commerce site where the backend\\n * manages user token balances.\\n * This contract is owned by a single address (the backend's address) which\\n * has the sole authority to add and subtract tokens from user accounts.\\n * All balance changes are recorded on the blockchain via events for transparency.\\n */\\ncontract ECommerceWallet is Ownable {\\n    // Mapping from user address (or unique ID represented as address) to their token balance\\n    mapping(address => uint256) private _balances;\\n    \\n    // Mapping from user ID to their assigned wallet address\\n    mapping(string => address) private _userWallets;\\n    \\n    // Mapping to check if a wallet address is registered\\n    mapping(address => bool) private _isRegistered;\\n    \\n    // Counter for generating unique wallet addresses\\n    uint256 private _walletCounter;\\n\\n    // Event emitted when tokens are added to a user's balance\\n    event TokensAdded(address indexed user, uint256 amount, uint256 newBalance);\\n\\n    // Event emitted when tokens are subtracted from a user's balance\\n    event TokensSubtracted(address indexed user, uint256 amount, uint256 newBalance);\\n    \\n    // Event emitted when a new wallet is created for a user\\n    event WalletCreated(string indexed userId, address indexed walletAddress);\\n\\n    /**\\n     * @dev Creates a new wallet address for a user identified by userId.\\n     * Only the contract owner (backend) can call this function.\\n     * @param userId The unique identifier for the user (e.g., email, username, or UUID).\\n     * @return walletAddress The generated wallet address for the user.\\n     */\\n    function createWallet(string memory userId) public onlyOwner returns (address) {\\n        require(bytes(userId).length > 0, \\\"ECommerceWallet: userId cannot be empty\\\");\\n        require(_userWallets[userId] == address(0), \\\"ECommerceWallet: wallet already exists for this user\\\");\\n        \\n        // Generate a deterministic address based on contract address, userId, and counter\\n        address walletAddress = address(uint160(uint256(keccak256(abi.encodePacked(\\n            address(this),\\n            userId,\\n            _walletCounter,\\n            block.timestamp\\n        )))));\\n        \\n        // Ensure the generated address is not already registered\\n        while (_isRegistered[walletAddress]) {\\n            _walletCounter++;\\n            walletAddress = address(uint160(uint256(keccak256(abi.encodePacked(\\n                address(this),\\n                userId,\\n                _walletCounter,\\n                block.timestamp\\n            )))));\\n        }\\n        \\n        _userWallets[userId] = walletAddress;\\n        _isRegistered[walletAddress] = true;\\n        _walletCounter++;\\n        \\n        emit WalletCreated(userId, walletAddress);\\n        return walletAddress;\\n    }\\n\\n    /**\\n     * @dev Returns the wallet address for a given userId.\\n     * @param userId The unique identifier for the user.\\n     * @return The wallet address associated with the userId.\\n     */\\n    function getWalletAddress(string memory userId) public view returns (address) {\\n        return _userWallets[userId];\\n    }\\n\\n    /**\\n     * @dev Checks if a wallet address is registered in the system.\\n     * @param walletAddress The address to check.\\n     * @return True if the address is registered, false otherwise.\\n     */\\n    function isWalletRegistered(address walletAddress) public view returns (bool) {\\n        return _isRegistered[walletAddress];\\n    }\\n\\n    /**\\n     * @dev Adds a specified `amount` of tokens to a `user`'s balance.\\n     * Only the contract owner (backend) can call this function.\\n     * @param user The address (or unique ID) of the user whose balance will be increased.\\n     * @param amount The amount of tokens to add.\\n     */\\n    function addTokens(address user, uint256 amount) public onlyOwner {\\n        require(user != address(0), \\\"ECommerceWallet: cannot add tokens to the zero address\\\");\\n        _balances[user] += amount; // Safely adds tokens (handles overflow if amount is huge, but unlikely for balances)\\n        emit TokensAdded(user, amount, _balances[user]);\\n    }\\n\\n    /**\\n     * @dev Convenience function to add tokens using userId instead of address.\\n     * Only the contract owner (backend) can call this function.\\n     * @param userId The unique identifier for the user.\\n     * @param amount The amount of tokens to add.\\n     */\\n    function addTokensByUserId(string memory userId, uint256 amount) public onlyOwner {\\n        address userAddress = _userWallets[userId];\\n        require(userAddress != address(0), \\\"ECommerceWallet: wallet not found for this user\\\");\\n        addTokens(userAddress, amount);\\n    }\\n\\n    /**\\n     * @dev Subtracts a specified `amount` of tokens from a `user`'s balance.\\n     * Only the contract owner (backend) can call this function.\\n     * Requires that the user has sufficient balance.\\n     * @param user The address (or unique ID) of the user whose balance will be decreased.\\n     * @param amount The amount of tokens to subtract.\\n     */\\n    function subtractTokens(address user, uint256 amount) public onlyOwner {\\n        require(user != address(0), \\\"ECommerceWallet: cannot subtract tokens from the zero address\\\");\\n        require(_balances[user] >= amount, \\\"ECommerceWallet: insufficient balance\\\");\\n        _balances[user] -= amount; // Safely subtracts tokens\\n        emit TokensSubtracted(user, amount, _balances[user]);\\n    }\\n\\n    /**\\n     * @dev Convenience function to subtract tokens using userId instead of address.\\n     * Only the contract owner (backend) can call this function.\\n     * @param userId The unique identifier for the user.\\n     * @param amount The amount of tokens to subtract.\\n     */\\n    function subtractTokensByUserId(string memory userId, uint256 amount) public onlyOwner {\\n        address userAddress = _userWallets[userId];\\n        require(userAddress != address(0), \\\"ECommerceWallet: wallet not found for this user\\\");\\n        subtractTokens(userAddress, amount);\\n    }\\n\\n    /**\\n     * @dev Returns the current token balance of a specific `user`.\\n     * @param user The address (or unique ID) of the user.\\n     * @return The balance of the user.\\n     */\\n    function getBalance(address user) public view returns (uint256) {\\n        return _balances[user];\\n    }\\n\\n    /**\\n     * @dev Convenience function to get balance using userId instead of address.\\n     * @param userId The unique identifier for the user.\\n     * @return The balance of the user.\\n     */\\n    function getBalanceByUserId(string memory userId) public view returns (uint256) {\\n        address userAddress = _userWallets[userId];\\n        require(userAddress != address(0), \\\"ECommerceWallet: wallet not found for this user\\\");\\n        return _balances[userAddress];\\n    }\\n}\",\"keccak256\":\"0xcb8ea80ed92947aaafd3dd2ce62b9d0b8d38baf5a9de54e0ff798de66d958158\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3611a6b806100ba6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638be9ab04116100715780638be9ab041461018a5780638da5cb5b146101a6578063d44741a0146101c4578063e3bd0699146101e0578063f2fde38b146101fc578063f8b2cb4f14610218576100a9565b806308f20630146100ae578063217a56cd146100de5780636039fbdb1461010e5780637404f1d21461012a5780637f247e491461015a575b600080fd5b6100c860048036038101906100c39190611147565b610248565b6040516100d591906111d1565b60405180910390f35b6100f860048036038101906100f39190611147565b610290565b6040516101059190611205565b60405180910390f35b61012860048036038101906101239190611278565b61038b565b005b610144600480360381019061013f9190611147565b610558565b60405161015191906111d1565b60405180910390f35b610174600480360381019061016f91906112b8565b6108c9565b6040516101819190611300565b60405180910390f35b6101a4600480360381019061019f9190611278565b61091f565b005b6101ae610b6e565b6040516101bb91906111d1565b60405180910390f35b6101de60048036038101906101d9919061131b565b610b97565b005b6101fa60048036038101906101f5919061131b565b610ccd565b005b610216600480360381019061021191906112b8565b610e03565b005b610232600480360381019061022d91906112b8565b610fa4565b60405161023f9190611205565b60405180910390f35b600060028260405161025a91906113e8565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806002836040516102a391906113e8565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610343576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033a90611482565b60405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915050919050565b3373ffffffffffffffffffffffffffffffffffffffff166103aa610b6e565b73ffffffffffffffffffffffffffffffffffffffff1614610400576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f7906114ee565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361046f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046690611580565b60405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104be91906115cf565b925050819055508173ffffffffffffffffffffffffffffffffffffffff167fdc9670dbabdd488b372eb16ebe49a39b3124a12cdffdcefbc89834a408bf8ff882600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405161054c929190611603565b60405180910390a25050565b60003373ffffffffffffffffffffffffffffffffffffffff16610579610b6e565b73ffffffffffffffffffffffffffffffffffffffff16146105cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c6906114ee565b60405180910390fd5b6000825111610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a9061169e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660028360405161063b91906113e8565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146106c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b790611730565b60405180910390fd5b60003083600454426040516020016106db94939291906117b9565b6040516020818303038152906040528051906020012060001c90505b600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561079a576004600081548092919061075c90611803565b919050555030836004544260405160200161077a94939291906117b9565b6040516020818303038152906040528051906020012060001c90506106f7565b806002846040516107ab91906113e8565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506004600081548092919061086290611803565b91905055508073ffffffffffffffffffffffffffffffffffffffff168360405161088c91906113e8565b60405180910390207f582ba04b4371b240e4864e0bea1ca69f930e4b5e4b2fa7e5e5582b1ca39e00ef60405160405180910390a380915050919050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b3373ffffffffffffffffffffffffffffffffffffffff1661093e610b6e565b73ffffffffffffffffffffffffffffffffffffffff1614610994576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098b906114ee565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a03576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fa906118bd565b60405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610a85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7c9061194f565b60405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ad4919061196f565b925050819055508173ffffffffffffffffffffffffffffffffffffffff167fae81c84f999aa5b7416ec77e11c42cc9ade2f7e26cf37422f340ac5119eb340482600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051610b62929190611603565b60405180910390a25050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff16610bb6610b6e565b73ffffffffffffffffffffffffffffffffffffffff1614610c0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c03906114ee565b60405180910390fd5b6000600283604051610c1e91906113e8565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb590611482565b60405180910390fd5b610cc8818361091f565b505050565b3373ffffffffffffffffffffffffffffffffffffffff16610cec610b6e565b73ffffffffffffffffffffffffffffffffffffffff1614610d42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d39906114ee565b60405180910390fd5b6000600283604051610d5491906113e8565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610df4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610deb90611482565b60405180910390fd5b610dfe818361038b565b505050565b3373ffffffffffffffffffffffffffffffffffffffff16610e22610b6e565b73ffffffffffffffffffffffffffffffffffffffff1614610e78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6f906114ee565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ee7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ede90611a15565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6110548261100b565b810181811067ffffffffffffffff821117156110735761107261101c565b5b80604052505050565b6000611086610fed565b9050611092828261104b565b919050565b600067ffffffffffffffff8211156110b2576110b161101c565b5b6110bb8261100b565b9050602081019050919050565b82818337600083830152505050565b60006110ea6110e584611097565b61107c565b90508281526020810184848401111561110657611105611006565b5b6111118482856110c8565b509392505050565b600082601f83011261112e5761112d611001565b5b813561113e8482602086016110d7565b91505092915050565b60006020828403121561115d5761115c610ff7565b5b600082013567ffffffffffffffff81111561117b5761117a610ffc565b5b61118784828501611119565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111bb82611190565b9050919050565b6111cb816111b0565b82525050565b60006020820190506111e660008301846111c2565b92915050565b6000819050919050565b6111ff816111ec565b82525050565b600060208201905061121a60008301846111f6565b92915050565b611229816111b0565b811461123457600080fd5b50565b60008135905061124681611220565b92915050565b611255816111ec565b811461126057600080fd5b50565b6000813590506112728161124c565b92915050565b6000806040838503121561128f5761128e610ff7565b5b600061129d85828601611237565b92505060206112ae85828601611263565b9150509250929050565b6000602082840312156112ce576112cd610ff7565b5b60006112dc84828501611237565b91505092915050565b60008115159050919050565b6112fa816112e5565b82525050565b600060208201905061131560008301846112f1565b92915050565b6000806040838503121561133257611331610ff7565b5b600083013567ffffffffffffffff8111156113505761134f610ffc565b5b61135c85828601611119565b925050602061136d85828601611263565b9150509250929050565b600081519050919050565b600081905092915050565b60005b838110156113ab578082015181840152602081019050611390565b60008484015250505050565b60006113c282611377565b6113cc8185611382565b93506113dc81856020860161138d565b80840191505092915050565b60006113f482846113b7565b915081905092915050565b600082825260208201905092915050565b7f45436f6d6d6572636557616c6c65743a2077616c6c6574206e6f7420666f756e60008201527f6420666f72207468697320757365720000000000000000000000000000000000602082015250565b600061146c602f836113ff565b915061147782611410565b604082019050919050565b6000602082019050818103600083015261149b8161145f565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006114d86020836113ff565b91506114e3826114a2565b602082019050919050565b60006020820190508181036000830152611507816114cb565b9050919050565b7f45436f6d6d6572636557616c6c65743a2063616e6e6f742061646420746f6b6560008201527f6e7320746f20746865207a65726f206164647265737300000000000000000000602082015250565b600061156a6036836113ff565b91506115758261150e565b604082019050919050565b600060208201905081810360008301526115998161155d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006115da826111ec565b91506115e5836111ec565b92508282019050808211156115fd576115fc6115a0565b5b92915050565b600060408201905061161860008301856111f6565b61162560208301846111f6565b9392505050565b7f45436f6d6d6572636557616c6c65743a207573657249642063616e6e6f74206260008201527f6520656d70747900000000000000000000000000000000000000000000000000602082015250565b60006116886027836113ff565b91506116938261162c565b604082019050919050565b600060208201905081810360008301526116b78161167b565b9050919050565b7f45436f6d6d6572636557616c6c65743a2077616c6c657420616c72656164792060008201527f65786973747320666f7220746869732075736572000000000000000000000000602082015250565b600061171a6034836113ff565b9150611725826116be565b604082019050919050565b600060208201905081810360008301526117498161170d565b9050919050565b60008160601b9050919050565b600061176882611750565b9050919050565b600061177a8261175d565b9050919050565b61179261178d826111b0565b61176f565b82525050565b6000819050919050565b6117b36117ae826111ec565b611798565b82525050565b60006117c58287611781565b6014820191506117d582866113b7565b91506117e182856117a2565b6020820191506117f182846117a2565b60208201915081905095945050505050565b600061180e826111ec565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036118405761183f6115a0565b5b600182019050919050565b7f45436f6d6d6572636557616c6c65743a2063616e6e6f7420737562747261637460008201527f20746f6b656e732066726f6d20746865207a65726f2061646472657373000000602082015250565b60006118a7603d836113ff565b91506118b28261184b565b604082019050919050565b600060208201905081810360008301526118d68161189a565b9050919050565b7f45436f6d6d6572636557616c6c65743a20696e73756666696369656e7420626160008201527f6c616e6365000000000000000000000000000000000000000000000000000000602082015250565b60006119396025836113ff565b9150611944826118dd565b604082019050919050565b600060208201905081810360008301526119688161192c565b9050919050565b600061197a826111ec565b9150611985836111ec565b925082820390508181111561199d5761199c6115a0565b5b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006119ff6026836113ff565b9150611a0a826119a3565b604082019050919050565b60006020820190508181036000830152611a2e816119f2565b905091905056fea264697066735822122080f6276ddfb312a759167f2291c618b2e67158eb31aba0ffa93d2f2400e5f99764736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80638be9ab04116100715780638be9ab041461018a5780638da5cb5b146101a6578063d44741a0146101c4578063e3bd0699146101e0578063f2fde38b146101fc578063f8b2cb4f14610218576100a9565b806308f20630146100ae578063217a56cd146100de5780636039fbdb1461010e5780637404f1d21461012a5780637f247e491461015a575b600080fd5b6100c860048036038101906100c39190611147565b610248565b6040516100d591906111d1565b60405180910390f35b6100f860048036038101906100f39190611147565b610290565b6040516101059190611205565b60405180910390f35b61012860048036038101906101239190611278565b61038b565b005b610144600480360381019061013f9190611147565b610558565b60405161015191906111d1565b60405180910390f35b610174600480360381019061016f91906112b8565b6108c9565b6040516101819190611300565b60405180910390f35b6101a4600480360381019061019f9190611278565b61091f565b005b6101ae610b6e565b6040516101bb91906111d1565b60405180910390f35b6101de60048036038101906101d9919061131b565b610b97565b005b6101fa60048036038101906101f5919061131b565b610ccd565b005b610216600480360381019061021191906112b8565b610e03565b005b610232600480360381019061022d91906112b8565b610fa4565b60405161023f9190611205565b60405180910390f35b600060028260405161025a91906113e8565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806002836040516102a391906113e8565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610343576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033a90611482565b60405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915050919050565b3373ffffffffffffffffffffffffffffffffffffffff166103aa610b6e565b73ffffffffffffffffffffffffffffffffffffffff1614610400576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f7906114ee565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361046f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046690611580565b60405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104be91906115cf565b925050819055508173ffffffffffffffffffffffffffffffffffffffff167fdc9670dbabdd488b372eb16ebe49a39b3124a12cdffdcefbc89834a408bf8ff882600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405161054c929190611603565b60405180910390a25050565b60003373ffffffffffffffffffffffffffffffffffffffff16610579610b6e565b73ffffffffffffffffffffffffffffffffffffffff16146105cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c6906114ee565b60405180910390fd5b6000825111610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a9061169e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660028360405161063b91906113e8565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146106c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b790611730565b60405180910390fd5b60003083600454426040516020016106db94939291906117b9565b6040516020818303038152906040528051906020012060001c90505b600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561079a576004600081548092919061075c90611803565b919050555030836004544260405160200161077a94939291906117b9565b6040516020818303038152906040528051906020012060001c90506106f7565b806002846040516107ab91906113e8565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506004600081548092919061086290611803565b91905055508073ffffffffffffffffffffffffffffffffffffffff168360405161088c91906113e8565b60405180910390207f582ba04b4371b240e4864e0bea1ca69f930e4b5e4b2fa7e5e5582b1ca39e00ef60405160405180910390a380915050919050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b3373ffffffffffffffffffffffffffffffffffffffff1661093e610b6e565b73ffffffffffffffffffffffffffffffffffffffff1614610994576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098b906114ee565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a03576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fa906118bd565b60405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610a85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7c9061194f565b60405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ad4919061196f565b925050819055508173ffffffffffffffffffffffffffffffffffffffff167fae81c84f999aa5b7416ec77e11c42cc9ade2f7e26cf37422f340ac5119eb340482600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051610b62929190611603565b60405180910390a25050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff16610bb6610b6e565b73ffffffffffffffffffffffffffffffffffffffff1614610c0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c03906114ee565b60405180910390fd5b6000600283604051610c1e91906113e8565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb590611482565b60405180910390fd5b610cc8818361091f565b505050565b3373ffffffffffffffffffffffffffffffffffffffff16610cec610b6e565b73ffffffffffffffffffffffffffffffffffffffff1614610d42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d39906114ee565b60405180910390fd5b6000600283604051610d5491906113e8565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610df4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610deb90611482565b60405180910390fd5b610dfe818361038b565b505050565b3373ffffffffffffffffffffffffffffffffffffffff16610e22610b6e565b73ffffffffffffffffffffffffffffffffffffffff1614610e78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6f906114ee565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ee7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ede90611a15565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6110548261100b565b810181811067ffffffffffffffff821117156110735761107261101c565b5b80604052505050565b6000611086610fed565b9050611092828261104b565b919050565b600067ffffffffffffffff8211156110b2576110b161101c565b5b6110bb8261100b565b9050602081019050919050565b82818337600083830152505050565b60006110ea6110e584611097565b61107c565b90508281526020810184848401111561110657611105611006565b5b6111118482856110c8565b509392505050565b600082601f83011261112e5761112d611001565b5b813561113e8482602086016110d7565b91505092915050565b60006020828403121561115d5761115c610ff7565b5b600082013567ffffffffffffffff81111561117b5761117a610ffc565b5b61118784828501611119565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111bb82611190565b9050919050565b6111cb816111b0565b82525050565b60006020820190506111e660008301846111c2565b92915050565b6000819050919050565b6111ff816111ec565b82525050565b600060208201905061121a60008301846111f6565b92915050565b611229816111b0565b811461123457600080fd5b50565b60008135905061124681611220565b92915050565b611255816111ec565b811461126057600080fd5b50565b6000813590506112728161124c565b92915050565b6000806040838503121561128f5761128e610ff7565b5b600061129d85828601611237565b92505060206112ae85828601611263565b9150509250929050565b6000602082840312156112ce576112cd610ff7565b5b60006112dc84828501611237565b91505092915050565b60008115159050919050565b6112fa816112e5565b82525050565b600060208201905061131560008301846112f1565b92915050565b6000806040838503121561133257611331610ff7565b5b600083013567ffffffffffffffff8111156113505761134f610ffc565b5b61135c85828601611119565b925050602061136d85828601611263565b9150509250929050565b600081519050919050565b600081905092915050565b60005b838110156113ab578082015181840152602081019050611390565b60008484015250505050565b60006113c282611377565b6113cc8185611382565b93506113dc81856020860161138d565b80840191505092915050565b60006113f482846113b7565b915081905092915050565b600082825260208201905092915050565b7f45436f6d6d6572636557616c6c65743a2077616c6c6574206e6f7420666f756e60008201527f6420666f72207468697320757365720000000000000000000000000000000000602082015250565b600061146c602f836113ff565b915061147782611410565b604082019050919050565b6000602082019050818103600083015261149b8161145f565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006114d86020836113ff565b91506114e3826114a2565b602082019050919050565b60006020820190508181036000830152611507816114cb565b9050919050565b7f45436f6d6d6572636557616c6c65743a2063616e6e6f742061646420746f6b6560008201527f6e7320746f20746865207a65726f206164647265737300000000000000000000602082015250565b600061156a6036836113ff565b91506115758261150e565b604082019050919050565b600060208201905081810360008301526115998161155d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006115da826111ec565b91506115e5836111ec565b92508282019050808211156115fd576115fc6115a0565b5b92915050565b600060408201905061161860008301856111f6565b61162560208301846111f6565b9392505050565b7f45436f6d6d6572636557616c6c65743a207573657249642063616e6e6f74206260008201527f6520656d70747900000000000000000000000000000000000000000000000000602082015250565b60006116886027836113ff565b91506116938261162c565b604082019050919050565b600060208201905081810360008301526116b78161167b565b9050919050565b7f45436f6d6d6572636557616c6c65743a2077616c6c657420616c72656164792060008201527f65786973747320666f7220746869732075736572000000000000000000000000602082015250565b600061171a6034836113ff565b9150611725826116be565b604082019050919050565b600060208201905081810360008301526117498161170d565b9050919050565b60008160601b9050919050565b600061176882611750565b9050919050565b600061177a8261175d565b9050919050565b61179261178d826111b0565b61176f565b82525050565b6000819050919050565b6117b36117ae826111ec565b611798565b82525050565b60006117c58287611781565b6014820191506117d582866113b7565b91506117e182856117a2565b6020820191506117f182846117a2565b60208201915081905095945050505050565b600061180e826111ec565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036118405761183f6115a0565b5b600182019050919050565b7f45436f6d6d6572636557616c6c65743a2063616e6e6f7420737562747261637460008201527f20746f6b656e732066726f6d20746865207a65726f2061646472657373000000602082015250565b60006118a7603d836113ff565b91506118b28261184b565b604082019050919050565b600060208201905081810360008301526118d68161189a565b9050919050565b7f45436f6d6d6572636557616c6c65743a20696e73756666696369656e7420626160008201527f6c616e6365000000000000000000000000000000000000000000000000000000602082015250565b60006119396025836113ff565b9150611944826118dd565b604082019050919050565b600060208201905081810360008301526119688161192c565b9050919050565b600061197a826111ec565b9150611985836111ec565b925082820390508181111561199d5761199c6115a0565b5b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006119ff6026836113ff565b9150611a0a826119a3565b604082019050919050565b60006020820190508181036000830152611a2e816119f2565b905091905056fea264697066735822122080f6276ddfb312a759167f2291c618b2e67158eb31aba0ffa93d2f2400e5f99764736f6c634300081c0033",
  "devdoc": {
    "details": "A simplified wallet contract for an e-commerce site where the backend manages user token balances. This contract is owned by a single address (the backend's address) which has the sole authority to add and subtract tokens from user accounts. All balance changes are recorded on the blockchain via events for transparency.",
    "kind": "dev",
    "methods": {
      "addTokens(address,uint256)": {
        "details": "Adds a specified `amount` of tokens to a `user`'s balance. Only the contract owner (backend) can call this function.",
        "params": {
          "amount": "The amount of tokens to add.",
          "user": "The address (or unique ID) of the user whose balance will be increased."
        }
      },
      "addTokensByUserId(string,uint256)": {
        "details": "Convenience function to add tokens using userId instead of address. Only the contract owner (backend) can call this function.",
        "params": {
          "amount": "The amount of tokens to add.",
          "userId": "The unique identifier for the user."
        }
      },
      "createWallet(string)": {
        "details": "Creates a new wallet address for a user identified by userId. Only the contract owner (backend) can call this function.",
        "params": {
          "userId": "The unique identifier for the user (e.g., email, username, or UUID)."
        },
        "returns": {
          "_0": "walletAddress The generated wallet address for the user."
        }
      },
      "getBalance(address)": {
        "details": "Returns the current token balance of a specific `user`.",
        "params": {
          "user": "The address (or unique ID) of the user."
        },
        "returns": {
          "_0": "The balance of the user."
        }
      },
      "getBalanceByUserId(string)": {
        "details": "Convenience function to get balance using userId instead of address.",
        "params": {
          "userId": "The unique identifier for the user."
        },
        "returns": {
          "_0": "The balance of the user."
        }
      },
      "getWalletAddress(string)": {
        "details": "Returns the wallet address for a given userId.",
        "params": {
          "userId": "The unique identifier for the user."
        },
        "returns": {
          "_0": "The wallet address associated with the userId."
        }
      },
      "isWalletRegistered(address)": {
        "details": "Checks if a wallet address is registered in the system.",
        "params": {
          "walletAddress": "The address to check."
        },
        "returns": {
          "_0": "True if the address is registered, false otherwise."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "subtractTokens(address,uint256)": {
        "details": "Subtracts a specified `amount` of tokens from a `user`'s balance. Only the contract owner (backend) can call this function. Requires that the user has sufficient balance.",
        "params": {
          "amount": "The amount of tokens to subtract.",
          "user": "The address (or unique ID) of the user whose balance will be decreased."
        }
      },
      "subtractTokensByUserId(string,uint256)": {
        "details": "Convenience function to subtract tokens using userId instead of address. Only the contract owner (backend) can call this function.",
        "params": {
          "amount": "The amount of tokens to subtract.",
          "userId": "The unique identifier for the user."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "ECommerceWallet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4,
        "contract": "contracts/wallet.sol:ECommerceWallet",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 88,
        "contract": "contracts/wallet.sol:ECommerceWallet",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 92,
        "contract": "contracts/wallet.sol:ECommerceWallet",
        "label": "_userWallets",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 96,
        "contract": "contracts/wallet.sol:ECommerceWallet",
        "label": "_isRegistered",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 98,
        "contract": "contracts/wallet.sol:ECommerceWallet",
        "label": "_walletCounter",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}